# Generated by Django 3.2.5 on 2021-07-15 14:00

from typing import List

import nanoid
import structlog
from django.db import migrations, models, transaction
from django.db.migrations.operations.base import Operation

import tournaments.models

logger = structlog.get_logger(__name__)


def populate_uid_field(apps, schema_editor):
    for model in uid_models:
        logger.info("Setting UIDs for model", model=model)
        rows_updated = 0
        Model = apps.get_model("tournaments", model)
        while Model.objects.filter(uid__isnull=True).exists():
            with transaction.atomic():
                for row in Model.objects.filter(uid__isnull=True)[:1000]:
                    row.uid = nanoid.generate(size=21)
                    row.save()
                    rows_updated += 1
        logger.info(f"Updated UIDs for model", model=model, rows_updated=rows_updated)


def clear_uid_field(apps, schema_editor):
    """Placeholder function for unsetting the UID field during downgrades.

    This COULD be fleshed out for posterity, but in the context of this migration
    it would be wasted cycles since the next step in the downgrade will drop this
    column anyway."""
    pass


uid_models = [
    "instructor",
    "pelotonprofile",
    "ride",
    "tournament",
    "tournamentmember",
    "tournamentride",
    "tournamentteam",
    "workout",
]


def add_field_uid_nullable() -> List[Operation]:
    return [
        migrations.AddField(
            model_name=model,
            name="uid",
            field=models.CharField(
                null=True,
                max_length=21,
                unique=True,
            ),
        )
        for model in uid_models
    ]


def alter_field_id() -> List[Operation]:
    return [
        migrations.AlterField(
            model_name=model,
            name="id",
            field=models.BigAutoField(primary_key=True, serialize=False),
        )
        for model in uid_models
    ]


def set_uid() -> List[Operation]:
    return [migrations.RunPython(populate_uid_field, reverse_code=clear_uid_field)]


def alter_field_uid_nonnull() -> List[Operation]:
    return [
        migrations.AlterField(
            model_name=model,
            name="uid",
            field=models.CharField(
                default=tournaments.models.random_uid,
                editable=False,
                max_length=21,
                unique=True,
            ),
        )
        for model in uid_models
    ]


class Migration(migrations.Migration):

    dependencies = [
        ("tournaments", "0002_alter_tournamentmember_team"),
    ]

    operations = (
        add_field_uid_nullable()
        + alter_field_id()
        + set_uid()
        + alter_field_uid_nonnull()
    )
